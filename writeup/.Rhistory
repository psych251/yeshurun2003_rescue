# plot
forest(meta_model, showweights = TRUE, slab = forest_data$study)
install.packages("metafor")
dplot_cue_rt
#Make sub-selection of the data for RT
dplot_cue <- dp %>% group_by(sub, cue) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
####Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(psycho)
library(ggpubr)
library(gridExtra)
library(cowplot)
####Import data
d <- read_csv("Experiment.csv")
#### Prepare data for analysis - create columns and change variable names
#Create a new column 'cue' in the dataset d. If the value in the 'cue' column is 1, it assigns 'cued', otherwise 'neutral' to the new 'cue' column.
d$cue <- ifelse(d$cue == 1, 'cued', 'neutral')
#Generate new subject names with the format "s0XX" (where XX is a two-digit number) for each unique subject in the 'sub' column and assign these new names to the 'sub' column in the dataset.
x=1:length(unique(d$sub))
new_subNames=sprintf("s0%02d",x)
subNames = unique(d$sub)
for(i in 1:length(subNames)) {
d$sub[d$sub == subNames[i]] = new_subNames[i]
}
end
head(d)
#TargetLoc is the column with eccentricity information that are arbitraryly labeled from 1 to 6 in the stimulus creation code. The code below assigns back eccentricity values to 'targetLoc' labels.
kk = sort(unique(d$targetLoc))
mask1=d$targetLoc ==kk[1]
mask2=d$targetLoc ==kk[2]
mask3=d$targetLoc ==kk[3]
mask4=d$targetLoc ==kk[4]
mask5=d$targetLoc ==kk[5]
mask6=d$targetLoc ==kk[6]
d$targetLoc[mask1] = 0
d$targetLoc[mask2] = 3
d$targetLoc[mask3] = 6
d$targetLoc[mask4] = 9
d$targetLoc[mask5] = 13
d$targetLoc[mask6] = 16
#Convert  'cue,' 'targetLoc,' and 'ISI' columns in the dataset to factors
d <- d %>% mutate(
cue = factor(cue),targetLoc = factor(targetLoc), ISI = factor(ISI)
)
#### Compute dPrime
dp <- d %>% group_by(sub,cue,targetLoc,ISI) %>% summarize(nHit = sum(SDT == 'HI' ), nFA = sum(SDT == 'FA' ), nMiss = sum(SDT == 'MI' ), nCR = sum(SDT == 'CR' ), dPrime= dprime(nHit, nFA, nMiss, nCR)$dprime, criterion=dprime(nHit, nFA, nMiss, nCR)$c)
#### Make sub-selection of the data for plotting later on -accuracy
dplot_cue <- dp %>% group_by(sub,cue) %>% summarize(dPrime = mean(dPrime))
dplot_ecc <- dp %>% group_by(cue,targetLoc) %>% summarize(dPrime = mean(dPrime))
dplot_ecc2 <- dp %>% group_by(targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ISI <- dp %>% group_by(cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_stat_ISI <- dp %>% group_by(sub,cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd <- dp %>% group_by(sub,targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd
#Make sub-selection of the data for RT
dplot_cue <- dp %>% group_by(sub, cue) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc <- dp %>% group_by(cue, targetLoc) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc2 <- dp %>% group_by(targetLoc, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ISI <- dp %>% group_by(cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_stat_ISI <- dp %>% group_by(sub, cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_cue
*Using a 0-1 scale rating \[0, .25, .5, .75, 1\], how well did this rescue replicate the original results?*
**Figure 8.**
![](images/Screenshot%202023-12-12%20at%2019.07.18.png)
!(images/Screenshot%202023-12-12%20at%2019.07.18.png)
####Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(psycho)
library(ggpubr)
library(gridExtra)
library(cowplot)
####Import data
d <- read_csv("Experiment.csv")
#### Prepare data for analysis - create columns and change variable names
#Create a new column 'cue' in the dataset d. If the value in the 'cue' column is 1, it assigns 'cued', otherwise 'neutral' to the new 'cue' column.
d$cue <- ifelse(d$cue == 1, 'cued', 'neutral')
#Generate new subject names with the format "s0XX" (where XX is a two-digit number) for each unique subject in the 'sub' column and assign these new names to the 'sub' column in the dataset.
x=1:length(unique(d$sub))
new_subNames=sprintf("s0%02d",x)
subNames = unique(d$sub)
for(i in 1:length(subNames)) {
d$sub[d$sub == subNames[i]] = new_subNames[i]
}
end
head(d)
#TargetLoc is the column with eccentricity information that are arbitraryly labeled from 1 to 6 in the stimulus creation code. The code below assigns back eccentricity values to 'targetLoc' labels.
kk = sort(unique(d$targetLoc))
mask1=d$targetLoc ==kk[1]
mask2=d$targetLoc ==kk[2]
mask3=d$targetLoc ==kk[3]
mask4=d$targetLoc ==kk[4]
mask5=d$targetLoc ==kk[5]
mask6=d$targetLoc ==kk[6]
d$targetLoc[mask1] = 0
d$targetLoc[mask2] = 3
d$targetLoc[mask3] = 6
d$targetLoc[mask4] = 9
d$targetLoc[mask5] = 13
d$targetLoc[mask6] = 16
#Convert  'cue,' 'targetLoc,' and 'ISI' columns in the dataset to factors
d <- d %>% mutate(
cue = factor(cue),targetLoc = factor(targetLoc), ISI = factor(ISI)
)
#### Compute dPrime
dp <- d %>% group_by(sub,cue,targetLoc,ISI) %>% summarize(nHit = sum(SDT == 'HI' ), nFA = sum(SDT == 'FA' ), nMiss = sum(SDT == 'MI' ), nCR = sum(SDT == 'CR' ), dPrime= dprime(nHit, nFA, nMiss, nCR)$dprime, criterion=dprime(nHit, nFA, nMiss, nCR)$c)
#### Make sub-selection of the data for plotting later on -accuracy
dplot_cue <- dp %>% group_by(sub,cue) %>% summarize(dPrime = mean(dPrime))
dplot_ecc <- dp %>% group_by(cue,targetLoc) %>% summarize(dPrime = mean(dPrime))
dplot_ecc2 <- dp %>% group_by(targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ISI <- dp %>% group_by(cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_stat_ISI <- dp %>% group_by(sub,cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd <- dp %>% group_by(sub,targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd
#Make sub-selection of the data for RT
dplot_cue <- dp %>% group_by(sub, cue) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc <- dp %>% group_by(cue, targetLoc) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc2 <- dp %>% group_by(targetLoc, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ISI <- dp %>% group_by(cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_stat_ISI <- dp %>% group_by(sub, cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
###Accuracy
# within-subject 3-way Anova on Accuracy (dPrime), testing the interaction of cue,eccentricity,and ISI
Result_accuracy <- aov(dPrime ~ (cue*targetLoc*ISI) + Error(sub/cue*targetLoc*ISI), data=dp)
summary(Result_accuracy)
# main effect: Cuing
summary(Result_accuracy[5])
# interaction effect: Cuing X ISI
summary(Result_accuracy[10])
### RT
# Within-subject 3-way ANOVA - Reaction Time
Result_rt <- aov(RT ~ (cue * targetLoc * ISI) + Error(sub / cue * targetLoc * ISI), data = d)
# Summary of RT ANOVA
summary(Result_rt)
# Main effect: Cuing
summary(Result_rt[5])
# Interaction effect: Cuing X ISI
summary(Result_rt[10])
### Plotting
# Cueing effect
p1 <- ggplot(dplot_cue, aes(x=cue, y=dPrime))+
geom_boxplot() +
#geom_jitter((aes(colour = sub)), size=3, alpha=0.9) +
scale_y_continuous(breaks = seq(0,3.75,0.5),limits = c(0,3.75))+
ggtitle("Cueing Condition") +
theme_classic()
#p1 <- ggplot(dplot_cue, aes(x=cue, y=dPrime))+
# geom_bar(stat = "identity") +
# scale_y_continuous(breaks = seq(0,3.75,0.5),limits = c(0,3.75))+
# ggtitle("Cueing Condition") +
# theme_classic()
# Cueing X Ecc
p2 <- ggplot(dplot_ecc, aes(x=targetLoc, y=`dPrime`, group=cue)) +
geom_line(aes(linetype=cue))+
geom_point(aes(shape=cue))+
scale_y_continuous(breaks = seq(0,4,0.5),limits = c(0,4))+
scale_x_discrete(name="Eccentricity (deg)")+
ggtitle("Eccentricity") +
theme_classic()
# Cueing X ISI
p3 <- ggplot(dplot_ISI, aes(x=ISI, y=dPrime, group=cue)) +
geom_line(aes(linetype=cue))+
geom_point(aes(shape=cue))+
scale_y_continuous(breaks = seq(0,4,0.5),limits = c(0,4))+
scale_x_discrete(name="ISI (ms)")+
theme_classic()
# ECC X ISI
p4 <- ggplot(dplot_ecc2, aes(x=targetLoc, y=`dPrime`, group=ISI)) +
geom_line(aes(linetype=ISI))+
geom_point(aes(shape=ISI))+
scale_y_continuous(breaks = seq(0,4,0.5),limits = c(0,4))+
scale_x_discrete(name="Eccentricity (deg)")+
theme_classic()
plot_grid(p1, p2, p3, p4,ncol = 2, nrow = 2)
library(emmeans)
# Obtain estimated marginal means (lsmeans)
lsmeans <- emmeans(Result_rt, ~ cue * targetLoc);
# Pairwise comparisons
pwc <- pairs(lsmeans, adjust = "sidak");
#Find the significanr comprarison:
# install.packages("broom")
library(broom)
pwc_df <- tidy(pwc)
# Filter rows with adj.p.value < 0.05
significant_comparisons <- subset(pwc_df, adj.p.value < 0.05)
# Display the significant comparisons
print(significant_comparisons)
# Convert 'cue' and 'targetLoc' to factors for correct plotting
d$cue <- as.factor(d$cue)
d$targetLoc <- as.factor(d$targetLoc)
# Calculate summary statistics
summary_data <- d %>%
group_by(cue, targetLoc) %>%
summarise(mean = mean(RT), sd = sd(RT))
# Create a grouped bar plot with error bars
grouped_bar_plot <- ggplot(summary_data, aes(x = targetLoc, y = mean, fill = cue)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(
aes(ymin = mean - sd, ymax = mean + sd, group = cue),
position = position_dodge(width = 0.8), width = 0.25,
size = 0.7
) +
labs(title = "Grouped Bar Plot",
x = "targetLoc",
y = "Reaction Time (RT)",
fill = "Cue") +
theme_minimal()
# Display the plot
print(grouped_bar_plot)
#Calculate effect size for first replication
# Given values from ANOVA output
ss_cue <- 1.534
ss_residuals <- 10.557
# Calculate partial eta-squared
eta_squared <- ss_cue / (ss_cue + ss_residuals)
eta_squared<-round(eta_squared, 2)
# Print the result with two decimal places
cat("Partial Eta-squared for cue:",eta_squared, "\n")
#Calculate effect size for second replication
## Given values from ANOVA output
ss_cue_2 <- 0.030803
ss_residuals_2 <- 1.747621
## Calculate partial eta-squared
eta_squared_2 <- ss_cue_2 / (ss_cue_2 + ss_residuals_2)
eta_squared_2 <-round(eta_squared_2, 2)
## Print the result with two decimal places
cat("Partial Eta-squared for cue:",eta_squared_2, "\n")
# Calculate aggregate effect size (average)
aggregate_effect_size <- (eta_squared+ eta_squared_2) / 2
# Print the result with two decimal places
cat("Aggregate Effect Size for cue across two experiments:", round(aggregate_effect_size, 2), "\n")
#Alternatively:
install.packages("metafor")
library(metafor)
# Given effect sizes and standard errors from two experiments
es_1 <- eta_squared
se_1 <- sqrt(ss_cue / (ss_cue + ss_residuals))
es_2 <- eta_squared_2
se_2 <- sqrt(ss_cue_2 / (ss_cue_2 + ss_residuals_2))
# Create a data frame with effect sizes and standard errors
forest_data <- data.frame(
study = c("Experiment 1", "Experiment 2"),
es = c(es_1, es_2),
se = c(se_1, se_2)
)
# Create a meta-analysis model
meta_model <- rma(es, sei = se, data = forest_data)
# Print the summary of the meta-analysis
print(meta_model)
# plot
forest(meta_model, showweights = TRUE, slab = forest_data$study)
![Fig.8., taken from LeBel et al. (2018).](replication_continuum.png)
####Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(psycho)
library(ggpubr)
library(gridExtra)
library(cowplot)
####Import data
d <- read_csv("Experiment.csv")
#### Prepare data for analysis - create columns and change variable names
#Create a new column 'cue' in the dataset d. If the value in the 'cue' column is 1, it assigns 'cued', otherwise 'neutral' to the new 'cue' column.
d$cue <- ifelse(d$cue == 1, 'cued', 'neutral')
#Generate new subject names with the format "s0XX" (where XX is a two-digit number) for each unique subject in the 'sub' column and assign these new names to the 'sub' column in the dataset.
x=1:length(unique(d$sub))
new_subNames=sprintf("s0%02d",x)
subNames = unique(d$sub)
for(i in 1:length(subNames)) {
d$sub[d$sub == subNames[i]] = new_subNames[i]
}
end
head(d)
#TargetLoc is the column with eccentricity information that are arbitraryly labeled from 1 to 6 in the stimulus creation code. The code below assigns back eccentricity values to 'targetLoc' labels.
kk = sort(unique(d$targetLoc))
mask1=d$targetLoc ==kk[1]
mask2=d$targetLoc ==kk[2]
mask3=d$targetLoc ==kk[3]
mask4=d$targetLoc ==kk[4]
mask5=d$targetLoc ==kk[5]
mask6=d$targetLoc ==kk[6]
d$targetLoc[mask1] = 0
d$targetLoc[mask2] = 3
d$targetLoc[mask3] = 6
d$targetLoc[mask4] = 9
d$targetLoc[mask5] = 13
d$targetLoc[mask6] = 16
#Convert  'cue,' 'targetLoc,' and 'ISI' columns in the dataset to factors
d <- d %>% mutate(
cue = factor(cue),targetLoc = factor(targetLoc), ISI = factor(ISI)
)
#### Compute dPrime
dp <- d %>% group_by(sub,cue,targetLoc,ISI) %>% summarize(nHit = sum(SDT == 'HI' ), nFA = sum(SDT == 'FA' ), nMiss = sum(SDT == 'MI' ), nCR = sum(SDT == 'CR' ), dPrime= dprime(nHit, nFA, nMiss, nCR)$dprime, criterion=dprime(nHit, nFA, nMiss, nCR)$c)
#### Make sub-selection of the data for plotting later on -accuracy
dplot_cue <- dp %>% group_by(sub,cue) %>% summarize(dPrime = mean(dPrime))
dplot_ecc <- dp %>% group_by(cue,targetLoc) %>% summarize(dPrime = mean(dPrime))
dplot_ecc2 <- dp %>% group_by(targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ISI <- dp %>% group_by(cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_stat_ISI <- dp %>% group_by(sub,cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd <- dp %>% group_by(sub,targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd
# Make sub-selection of the data for RT
dplot_cue <- dp %>% group_by(sub, cue) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc <- dp %>% group_by(cue, targetLoc) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc2 <- dp %>% group_by(targetLoc, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ISI <- dp %>% group_by(cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_stat_ISI <- dp %>% group_by(sub, cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
# Make sub-selection of the data for RT
dplot_cue <- dp %>% group_by(sub, cue) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc <- dp %>% group_by(cue, targetLoc) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc2 <- dp %>% group_by(targetLoc, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ISI <- dp %>% group_by(cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_stat_ISI <- dp %>% group_by(sub, cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
#Accuracy
# within-subject 3-way Anova on Accuracy (dPrime), testing the interaction of cue,eccentricity,and ISI
Result_accuracy <- aov(dPrime ~ (cue*targetLoc*ISI) + Error(sub/cue*targetLoc*ISI), data=dp)
summary(Result_accuracy)
# main effect: Cuing
summary(Result_accuracy[5])
# interaction effect: Cuing X ISI
summary(Result_accuracy[10])
# RT
# Within-subject 3-way ANOVA - Reaction Time
Result_rt <- aov(RT ~ (cue * targetLoc * ISI) + Error(sub / cue * targetLoc * ISI), data = d)
# Summary of RT ANOVA
summary(Result_rt)
# Main effect: Cuing
summary(Result_rt[5])
# Interaction effect: Cuing X ISI
summary(Result_rt[10])
#Calculate effect size for first replication
# Given values from ANOVA output
ss_cue <- 1.534
ss_residuals <- 10.557
# Calculate partial eta-squared
eta_squared <- ss_cue / (ss_cue + ss_residuals)
eta_squared<-round(eta_squared, 2)
# Print the result with two decimal places
cat("Partial Eta-squared for cue:",eta_squared, "\n")
#Calculate effect size for first replication
# Given values from ANOVA output
ss_cue <- 1.534
ss_residuals <- 10.557
# Calculate partial eta-squared
eta_squared <- ss_cue / (ss_cue + ss_residuals)
eta_squared<-round(eta_squared, 2)
# Print the result with two decimal places
cat("Partial Eta-squared for cue:",eta_squared, "\n")
#Calculate effect size for second replication
## Given values from ANOVA output
ss_cue_2 <- 0.586
ss_residuals_2 <- 13.823
## Calculate partial eta-squared
eta_squared_2 <- ss_cue_2 / (ss_cue_2 + ss_residuals_2)
eta_squared_2 <-round(eta_squared_2, 2)
## Print the result with two decimal places
cat("Partial Eta-squared for cue:",eta_squared_2, "\n")
# Calculate aggregate effect size (average)
aggregate_effect_size <- (eta_squared+ eta_squared_2) / 2
# Print the result with two decimal places
cat("Aggregate Effect Size for cue across two experiments:", round(aggregate_effect_size, 2), "\n")
#Alternatively:
options(repos = c(CRAN = "https://cran.rstudio.com/"))
install.packages("metafor")
library(metafor)
# Given effect sizes and standard errors from two experiments
es_1 <- eta_squared
se_1 <- sqrt(ss_cue / (ss_cue + ss_residuals))
es_2 <- eta_squared_2
se_2 <- sqrt(ss_cue_2 / (ss_cue_2 + ss_residuals_2))
# Create a data frame with effect sizes and standard errors
forest_data <- data.frame(
study = c("Experiment 1", "Experiment 2"),
es = c(es_1, es_2),
se = c(se_1, se_2)
)
# Create a meta-analysis model
meta_model <- rma(es, sei = se, data = forest_data)
# Print the summary of the meta-analysis
print(meta_model)
# plot
forest(meta_model, showweights = TRUE, slab = forest_data$study)
# Simple Effects Analysis
simple_effects <- emmeans(Result_accuracy, pairwise ~ cue | targetLoc, adjust = "bonferroni")
library(emmeans)
# Simple Effects Analysis
simple_effects <- emmeans(Result_accuracy, pairwise ~ cue | targetLoc, adjust = "bonferroni")
####Load Relevant Libraries and Functions
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(psycho)
library(ggpubr)
library(gridExtra)
library(cowplot)
####Import data
d <- read_csv("Experiment.csv")
#### Prepare data for analysis - create columns and change variable names
#Create a new column 'cue' in the dataset d. If the value in the 'cue' column is 1, it assigns 'cued', otherwise 'neutral' to the new 'cue' column.
d$cue <- ifelse(d$cue == 1, 'cued', 'neutral')
#Generate new subject names with the format "s0XX" (where XX is a two-digit number) for each unique subject in the 'sub' column and assign these new names to the 'sub' column in the dataset.
x=1:length(unique(d$sub))
new_subNames=sprintf("s0%02d",x)
subNames = unique(d$sub)
for(i in 1:length(subNames)) {
d$sub[d$sub == subNames[i]] = new_subNames[i]
}
end
head(d)
# TargetLoc is the column with eccentricity information that are arbitraryly labeled from 1 to 6 in the stimulus creation code. The code below assigns back eccentricity values to 'targetLoc' labels.
kk = sort(unique(d$targetLoc))
mask1=d$targetLoc ==kk[1]
mask2=d$targetLoc ==kk[2]
mask3=d$targetLoc ==kk[3]
mask4=d$targetLoc ==kk[4]
mask5=d$targetLoc ==kk[5]
mask6=d$targetLoc ==kk[6]
d$targetLoc[mask1] = 0
d$targetLoc[mask2] = 3
d$targetLoc[mask3] = 6
d$targetLoc[mask4] = 9
d$targetLoc[mask5] = 13
d$targetLoc[mask6] = 16
# Convert  'cue,' 'targetLoc,' and 'ISI' columns in the dataset to factors
d <- d %>% mutate(
cue = factor(cue),targetLoc = factor(targetLoc), ISI = factor(ISI)
)
# Compute dPrime
dp <- d %>% group_by(sub,cue,targetLoc,ISI) %>% summarize(nHit = sum(SDT == 'HI' ), nFA = sum(SDT == 'FA' ), nMiss = sum(SDT == 'MI' ), nCR = sum(SDT == 'CR' ), dPrime= dprime(nHit, nFA, nMiss, nCR)$dprime, criterion=dprime(nHit, nFA, nMiss, nCR)$c)
# Make sub-selection of the data for plotting later on -accuracy
dplot_cue <- dp %>% group_by(sub,cue) %>% summarize(dPrime = mean(dPrime))
dplot_ecc <- dp %>% group_by(cue,targetLoc) %>% summarize(dPrime = mean(dPrime))
dplot_ecc2 <- dp %>% group_by(targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ISI <- dp %>% group_by(cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_stat_ISI <- dp %>% group_by(sub,cue,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd <- dp %>% group_by(sub,targetLoc,ISI) %>% summarize(dPrime = mean(dPrime))
dplot_ecc_sd
# Make sub-selection of the data for RT
dplot_cue <- dp %>% group_by(sub, cue) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc <- dp %>% group_by(cue, targetLoc) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ecc2 <- dp %>% group_by(targetLoc, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_ISI <- dp %>% group_by(cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
dplot_stat_ISI <- dp %>% group_by(sub, cue, ISI) %>% summarize(dPrime = mean(dPrime), .groups = 'keep')
#Accuracy
# within-subject 3-way Anova on Accuracy (dPrime), testing the interaction of cue,eccentricity,and ISI
Result_accuracy <- aov(dPrime ~ (cue*targetLoc*ISI) + Error(sub/cue*targetLoc*ISI), data=dp)
summary(Result_accuracy)
# main effect: Cuing
summary(Result_accuracy[5])
# interaction effect: Cuing X ISI
summary(Result_accuracy[10])
# RT
# Within-subject 3-way ANOVA - Reaction Time
Result_rt <- aov(RT ~ (cue * targetLoc * ISI) + Error(sub / cue * targetLoc * ISI), data = d)
# Summary of RT ANOVA
summary(Result_rt)
# Main effect: Cuing
summary(Result_rt[5])
# Interaction effect: Cuing X ISI
summary(Result_rt[10])
# Plotting
# Cueing effect
p1 <- ggplot(dplot_cue, aes(x=cue, y=dPrime))+
geom_boxplot() +
#geom_jitter((aes(colour = sub)), size=3, alpha=0.9) +
scale_y_continuous(breaks = seq(0,3.75,0.5),limits = c(0,3.75))+
ggtitle("Cueing Condition") +
theme_classic()
#p1 <- ggplot(dplot_cue, aes(x=cue, y=dPrime))+
# geom_bar(stat = "identity") +
# scale_y_continuous(breaks = seq(0,3.75,0.5),limits = c(0,3.75))+
# ggtitle("Cueing Condition") +
# theme_classic()
# Cueing X Ecc
p2 <- ggplot(dplot_ecc, aes(x=targetLoc, y=`dPrime`, group=cue)) +
geom_line(aes(linetype=cue))+
geom_point(aes(shape=cue))+
scale_y_continuous(breaks = seq(0,4,0.5),limits = c(0,4))+
scale_x_discrete(name="Eccentricity (deg)")+
ggtitle("Eccentricity") +
theme_classic()
# Cueing X ISI
p3 <- ggplot(dplot_ISI, aes(x=ISI, y=dPrime, group=cue)) +
geom_line(aes(linetype=cue))+
geom_point(aes(shape=cue))+
scale_y_continuous(breaks = seq(0,4,0.5),limits = c(0,4))+
scale_x_discrete(name="ISI (ms)")+
theme_classic()
# ECC X ISI
p4 <- ggplot(dplot_ecc2, aes(x=targetLoc, y=`dPrime`, group=ISI)) +
geom_line(aes(linetype=ISI))+
geom_point(aes(shape=ISI))+
scale_y_continuous(breaks = seq(0,4,0.5),limits = c(0,4))+
scale_x_discrete(name="Eccentricity (deg)")+
theme_classic()
plot_grid(p1, p2, p3, p4,ncol = 2, nrow = 2)
library(emmeans)
# Simple Effects Analysis
simple_effects <- emmeans(Result_accuracy, pairwise ~ cue | targetLoc, adjust = "bonferroni")
# Review the simple effects analysis output
summary(simple_effects)
# Conduct pairwise comparisons where appropriate
# (The exact commands depend on the output of the simple effects analysis)
#Find the significant comprarison:
# install.packages("broom")
library(broom)
pwc_df <- tidy(pwc)
summary(simple_effects)
View(Result_accuracy)
